.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Spreadsheet::WriteExcel::WebPivot 3"
.TH Spreadsheet::WriteExcel::WebPivot 3 "2005-08-14" "perl v5.8.3" "User Contributed Perl Documentation"
.SH "NAME"
.Sh "makewebpivot"
.IX Subsection "makewebpivot"
.SH "SYNPOSIS"
.IX Header "SYNPOSIS"
use SpreadSheet::WriteExcel::WebPivot;
.PP
my \f(CW$xml\fR = SpreadSheet::WriteExcel::WebPivot\->\fInew()\fR;
.PP
$xml\->makewebpivot(db handle,query,query keys, summary type, file name, title);
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
this method creates an \s-1MS\s0 Excel Web Pivot which when viewed on a Windows 
machine with \s-1MS\s0 Office \s-1XP\s0 and \s-1IE\s0 gives you a fully functional embedded 
spreadsheet object in the browser. This should be able to run and produce
output anywhere perl is installed but the output will only be useful to those
running Windows and \s-1IE\s0.
The pivot table gives a high level summary of the numbers that can be
rearranged in different ways.
.SH "PARAMETERS"
.IX Header "PARAMETERS"
The parameters it takes are a database handle, a query string or array ref (see below), the query
keys which is a reference to an array of the names of fields in the query 
listed in the
order you want them diplayed in the web pivot, the summary type which is
the type of summary to be used in the pivot, the file name to save the
generated web pivot under and the last parameter is the title of the pivot table
.PP
Note the query parameter can also be a reference to an array of query strings.
makewebpivot will detect whether query is a string or array of strings. If it
is an array of strings it execute each query in order and add their results to
the pivot. Note that if you use multiple queries, all queries must return the
same results in the same format as the first query. This restriction is 
inherent in Excel pivot tables.
.PP
This module can also be used in the absense of a database connection by
passing in a reference to an array of hash references. When called this
way whatever query you pass in will be ignored and the module will instead 
present the data in the data structure you passed in. For a trivial sample:
.PP
use SpreadSheet::WriteExcel::WebPivot;
.PP
my \f(CW@array\fR;
.PP
for(my \f(CW$i\fR=0; \f(CW$i\fR < 20; \f(CW$i\fR++) {
	push \f(CW@array\fR, { Name => \*(L"a$i\*(R", Number => \f(CW$i\fR };
}	
.PP
my \f(CW@fields\fR = qw(Name Number);
.PP
my \f(CW$xml\fR = SpreadSheet::WriteExcel::WebPivot\->\fInew()\fR;
\&\f(CW$xml\fR\->makewebpivot(\e@array, '', \e@fields, 'Count', 'exceltest',
\&'Test Pivot');
.SH "AUTHOR"
.IX Header "AUTHOR"
Nathan Lewis, <nathanlewis42@yahoo.co.uk<gt>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2005 by Nathan Lewis
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.3 or,
at your option, any later version of Perl 5 you may have available.
